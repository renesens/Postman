{
	"info": {
		"_postman_id": "3284d557-dbcc-413a-b0a6-bff5840581e4",
		"name": "Group_U31_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23550508"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверить, что в body приходит правильный string. Response body: Is equal to string\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус код 200 - тест прописан в коллекции\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками)\r",
							"pm.test(\"Check_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Renata\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками)\r",
							"pm.test(\"Check_age\", function () {\r",
							"  pm.expect(jsonData.age).to.eql(\"37\");\r",
							"});\r",
							"\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками)\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"console.log(req)\r",
							"//Ответ в консоле: {name: \"Renata\", age: \"37\", salary: \"2000\"}\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check_name_from_req\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check_age_from_req\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Check_salary_from_req\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"pm.test(\"Console_family_response\", function () {\r",
							"    console.log(jsonData.family);\r",
							"});\r",
							"//ответ в консоле  \r",
							"//{children: [2], u_salary_1_5_year: 8000}\r",
							"//children: [2]\r",
							"//u_salary_1_5_year: 8000\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary_1_5_year_req_4=4*req.salary\r",
							"pm.test(\"u_salary_1_5_year_resp=u_salary_1_5_year_req\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(u_salary_1_5_year_req_4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Renata",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос.\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							" // Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"//ответ консоль: {age: \"27\", family: {…}, name: \"Matiush\"…}\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"console.log(req)\r",
							"//ответ консоль: {name: \"Matiush\", age: \"27\", salary: \"1000\"}\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_resp_from_req\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_resp_from_req\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_resp_from_req\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"// console.log(req.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"    console.log(\"family==\",jsonData.family);\r",
							"\r",
							"    //9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check_dog_have_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).haveOwnProperty(\"name\")\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check_dog_have_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).haveOwnProperty(\"age\")\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check_dog_name_have_value_Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"//console.log(jsonData.family.pets.dog.name)\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check_dog_age_have_value_4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"//console.log(jsonData.family.pets.dog.age)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Matiush&age=27&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Matiush"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Отправить запрос.\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let requ= pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check_name_from_request\", function () {\r",
							"    pm.expect(resp.name).to.eql(requ.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age_resp_from_age_req\", function () {\r",
							"    pm.expect(resp.age).to.eql(+requ.age);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary in request = \" +requ.salary)\r",
							"//ответ консоли: Salary in request = 3000\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary in response =\" +resp.salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Salary[0] = \" +resp.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary[1] = \" +resp.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary[2] = \" +resp.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary_resp[0]=salary_requ\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(+requ.salary);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_resp[1]=salary_requ\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(+requ.salary);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_resp[2]=salary_req\", function () {\r",
							"    pm.expect(Number(resp.salary[2])).to.eql(+requ.salary*3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"\r",
							"//18. Передать в окружение переменную name \r",
							"pm.environment.set(\"name\", requ.name);\r",
							"\r",
							"// //19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", requ.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", requ.salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"resp.salary.forEach((sal) => {console.log(\"salary--\",sal); })\r",
							"\r",
							"// for(var i=0; i<resp.salary.length ; i++)\r",
							"// {console.log(resp.salary[i])   }\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Darina&age=38&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Darina"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.environment.get('name')\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"let requ= request.data\r",
							"let requ_salary = requ.salary;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_start_qa_salary\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"start_qa_salary\")\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_6_months\")\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check_person\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"person\")\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start_qa_salary=start_qa_salary_from_request\", function () {\r",
							"    pm.expect(resp.start_qa_salary_req).to.eql(requ.start_qa_salary_req);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months=salary*2 from request\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+requ.salary*2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months=salary*2.7 from request\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+requ.salary*2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request ///(salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year_resp=qa_salary_after_1.5_year_req\", function () {\r",
							"pm.expect(requ.salary*3.3).to.eql(resp['qa_salary_after_1.5_year']);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years_resp=qa_salary_after_3.5_years_req\", function () {\r",
							"pm.expect(requ.salary*3.8).to.eql(resp['qa_salary_after_3.5_years']);\r",
							"});\r",
							"//console.log(requ.salary)\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check personu._name[1] =  salary from request\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+requ.salary);\r",
							"});\r",
							"\r",
							"//20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check person.u_age=age from req\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+requ.age);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check person.u_salary_5_years=salary*4.2 from request\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+requ.salary*4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"  \r",
							"// for(let i in resp.person)\r",
							"//     { \r",
							"//     console.log(i)\r",
							"//     console.log(resp.person[i])\r",
							"//     }\r",
							"\r",
							"for(key in resp['person']) {\r",
							"    if(resp['person'].hasOwnProperty(key)){\r",
							"        console.log(key);\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Darina",
							"disabled": true
						},
						{
							"key": "age",
							"value": "38",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "98000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}